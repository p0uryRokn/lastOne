name: Release
on:
  workflow_dispatch: {}

permissions:
  contents: read # for checkout

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Install dependencies
        run: npm clean-install

      - name: Verify the integrity of provenance attestations and registry signatures for installed dependencies
        run: npm audit signatures

      - name: Run Semantic Release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release

      - name: Overwrite body with GitHub-generated notes (exact format)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
      
          # Find the latest release tag and the previous one
          latest_tag="$(gh release list --limit 1 --json tagName -q '.[0].tagName' || true)"
          if [ -z "$latest_tag" ]; then
            echo "No releases found; skipping."
            exit 0
          fi
      
          # Try to get the previous tag by creation date (skip the latest)
          prev_tag="$(gh release list --limit 2 --json tagName -q '.[1].tagName' || true)"
      
          # Optional: bail out if this latest release wasnâ€™t created in this run (e.g., no new release)
          # You can compare createdAt timestamp or skip this guard if you run this workflow only on release runs.
      
          echo "Updating release body for $latest_tag (prev: ${prev_tag:-none})"
          body="$(gh api repos/${GITHUB_REPOSITORY}/releases/generate-notes \
                    -f tag_name="$latest_tag" \
                    ${prev_tag:+-f previous_tag_name="$prev_tag"} \
                    -q .body)"
          gh release edit "$latest_tag" --notes "$body"
