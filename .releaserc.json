{
  "branches": ["main"],
  "plugins": [
    [
      "@semantic-release/commit-analyzer",
      {
        "preset": "conventionalcommits",
        "releaseRules": [
          { "breaking": true, "release": "major" },
          { "type": "feat", "release": "minor" },
          { "type": "fix", "release": "patch" },
          { "type": "chore", "release": "patch" },
          { "type": "test", "release": "patch" },
          { "type": "refactor", "release": "patch" },
          { "type": "docs", "release": "patch" },
          { "type": "style", "release": "patch" },
          { "type": "build", "release": "patch" },
          { "type": "ci", "release": "patch" }
        ],
        "parserOpts": {
          "noteKeywords": ["BREAKING CHANGE", "BREAKING CHANGES", "BREAKING"]
        }
      }
    ],
    [
      "@semantic-release/release-notes-generator",
      {
        "preset": "conventionalcommits",
        "presetConfig": {
          "types": [
            { "type": "feat", "section": "Features" },
            { "type": "fix", "section": "Bug Fixes" },
            { "type": "chore", "section": "Chores" },
            { "type": "test", "section": "Tests" },
            { "type": "docs", "section": "Documentation" },
            { "type": "refactor", "section": "Refactoring" },
            { "type": "style", "section": "Style" },
            { "type": "build", "section": "Build System" },
            { "type": "ci", "section": "Continuous Integration" }
          ]
        }
      }
    ],
    [
      "@semantic-release/github",
      {
        "draftRelease": true,
        "releaseBodyTemplate": "<%= nextRelease.notes %>\n\n### ðŸ‘¥ Contributors\n<% try { %>\n<% const { execSync } = require('child_process'); %>\n<% const repo = execSync('git config --get remote.origin.url').toString().trim().match(/github\\.com[:/](.*)\\.git$/)[1]; %>\n<% const raw = execSync(`curl -s -H 'Accept: application/vnd.github+json' https://api.github.com/repos/${repo}/contributors?per_page=100`).toString(); %>\n<% const contributors = JSON.parse(raw); %>\n<%= contributors.map(c => `[![@${c.login}](${c.avatar_url}&s=40)](${c.html_url})`).join(' ') %>\n<% } catch (e) { %>\n_No contributor data available._\n<% } %>\n\n[Full Changelog](../../compare/<%= lastRelease.gitTag %>...<%= nextRelease.gitTag %>)"
      }
    ]
  ]
}